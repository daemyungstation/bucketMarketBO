#########################################################################################################
                                        1. 기본구성 및 각 모듈별 서브 구성
#########################################################################################################
    src
        - common : 프레임워크에서 제공하는 기능과 업무 공통 기능이 위치
        - web : 업무의 모듈 기능이 위치
            - web.batch : 배치 관련 모듈 기능이 위치
            - web.bo : 업무 관련 모듈 기능이 위치
                - web.bo.{업무명}.controller : 사용자와의 입출력을 담당하는 각종 클래스(Controller가) 위치 
                - web.bo.{업무명}.service : 비즈니스 서비스가 위치 하는 곳으로 인터페이스(Service)가 위치
                - web.bo.{업무명}.service.impl : 인터페이스 구현체(ServiceImpl)가 위치
            - web.ifcomm : 공통으로 사용하는 외부 인터페이스 모듈 기능이 위치
    resources
        - resources.db : 프로젝트 구동에 필요한 기본적인 SQL 구문이 위치
        - resources.egovframework : 프레임워크에서 제공하는 기능과 업무에 필요한 자원, 설정파일이 위치
            - resources.egovframework.message : 메시지 관련 자원이 위치
            - resources.egovframework.properties : 업무에 필요한 자원이 위치
                - resources.egovframework.properties.dev : 개발서버 환경 및 업무에 필요한 자원이 위치
                - resources.egovframework.properties.local : 로컬서버 환경 및 업무에 필요한 자원이 위치
                - resources.egovframework.properties.prd : 운영서버 환경 및 업무에 필요한 자원이 위치
            - resources.egovframework.spring : spring 설정 파일이 위치
            - resources.egovframework.sqlmap : mapper 설정 파일이 위치
                - resources.egovframework.sqlmap.mapper : 업무의 SQL 위치
                    - resources.egovframework.sqlmap.mapper.batch : 배치 관련 SQL 위치
                    - resources.egovframework.sqlmap.mapper.bo : 업무 관련 SQL 위치
                    - resources.egovframework.sqlmap.mapper.ifcomm : 공통으로 사용하는 외부 인터페이스 SQL 위치
    webapp
        - META-INF : license 파일 위치
        - nas : 업로드 파일 위치
            - nas.cdn : 업로드 이미지 파일 위치
            - nas.doc : 업로드 문서 파일 위치 
        - resources : 웹 자원 파일 위치
            - resources.css : css 파일 위치
            - resources.fonts : font 파일 위치
            - resources.html : html 파일 위치
            - resources.img : image 파일 위치
            - resources.js : js 파일 위치
            - resources.less : less 파일 위치
            - resources.smartEditor : smartEditor 파일 위치
        - WEB-INF : jsp 및 jar 파일 위치
            - WEB-INF.config : spring 설정파일(dispatcher-servlet.xml) 위치
            - WEB-INF.jsp : jsp 파일 위치
            - WEB-INF.lib : jar 파일 위치
            - WEB-INF.tag : 사용자 태그 라이브러리 위치
#########################################################################################################
                                            2. 명명 규칙
#########################################################################################################
    1. 패키지
        * 모듈명을 그대로 활용하되 가급적 10자 내외의 이름을 이용하며 직관적인 이름을 사용한다.
    2. 클래스
        * Class명은 대문자로 시작하는 CamelCase Style의 명사형 단어에 접미어 조합.
        * 각 패키지별 네이밍 규칙은 다음과 같다. (업무에 맞게 일관성 있는 명칭 부여)
        - controller(web.bo.board.controller) EX) NoticeBoardController
        - service(web.bo.board.service) EX) NoticeBoardService
        - serviceImpl(web.bo.board.service.impl) EX) NoticeBoardServiceImpl
    3. SQL
        * SQL명은 대문자로 시작하는 CamelCase Style의 명사형 단어에 접미어 조합.
        * 각 폴더별 네이밍 규칙은 다음과 같다. (업무에 맞게 일관성 있는 명칭 부여)
        - SQL(resources.egovframework.sqlmap.mapper.bo.board) EX) NoticeBoard_SQL.xml
    4. 메소드명
        * 소문자로 시작하는 CamelCase Style의 명사 + 동사의 조합
        * 각 클래스별 네이밍 규칙은 다음과 같다. (업무에 맞게 일관성 있는 명칭 부여)
        * controller EX) NoticeBoardController
            - 목록 : noticeBoardList
            - 등록 폼 : noticeBoardForm
            - 수정 폼 : noticeBoardEdit
            - 등록 : noticeBoardRegist
            - 수정 : noticeBoardModify
            - 삭제 : noticeBoardRemove
            - ajax : noticeBoardListAjax, noticeBoardRegistAjax
            - popup : noticeBoardListPopup, noticeBoardFormPopup
            
        * service, serviceImpl EX) NoticeBoardService, NoticeBoardServiceImpl
            - 리스트 개수 조회 : selectNoticeBoardListCount
            - 리스트 조회 : selectNoticeBoardList
            - 상세 조회 : selectNoticeBoardInfo
            - 등록 : insertNoticeBoard
            - 수정 : updateNoticeBoard
            - 삭제 : deleteNoticeBoard
    5. 변수명
        * camelcase 준용
    6. SQL ID
        * 소문자로 시작하는 CamelCase Style의 명사 + 동사의 조합
        * 각 SQL별 네이밍 규칙은 다음과 같다. (업무에 맞게 일관성 있는 명칭 부여)
        - 리스트 개수 조회 : selectNoticeBoardListCount
        - 리스트 조회 : selectNoticeBoardList
        - 상세 조회 : selectNoticeBoardInfo
        - 등록 : insertNoticeBoard
        - 수정 : updateNoticeBoard
        - 삭제 : deleteNoticeBoard
    7. jsp
        * 소문자로 시작하는 CamelCase Style의 명사 + 동사의 조합
        * 각 업무별 네이밍 규칙은 다음과 같다. (업무에 맞게 일관성 있는 명칭 부여)
        - 목록 : noticeBoardList
        - 상세 : noticeBoardView
        - 등록 폼 : noticeBoardForm
        - 수정 폼 : noticeBoardEdit
        - 팝업 : noticeBoardListPopup, noticeBoardFormPopup
        - 레이어 : noticeBoardViewLayer, noticeBoardEditLayer
    8. URI
        * 소문자로 시작하는 CamelCase Style의 명사 + 동사의 조합
        - 목록 : /bo/board/noticeBoardList.do
        - 상세 : /bo/board/noticeBoardView.do
        - 등록 폼 : /bo/board/noticeBoardForm.do
        - 수정 폼 : /bo/board/noticeBoardEdit.do
        - 팝업 : /bo/board/noticeBoardListPopup.do
        - 레이어 : /bo/board/noticeBoardViewLayer.do
        - 등록 : /bo/board/noticeBoardRegist.do
        - 수정 : /bo/board/noticeBoardModify.do
        - 삭제 : /bo/board/noticeBoardRemove.do
        - ajax : /bo/board/noticeBoardListAjax.do, /bo/board/noticeBoardRegistAjax.do
#########################################################################################################
                                            3. 개발환경
#########################################################################################################
    1. 스테이지 
        * 스테이지는 다음과 같이 3단계로 진행한다.
        - local: 개발자 PC
        - dev: 개발 서버 혹은 스테이징(운영전, 테스트) 서버 
        - prd: 운영서버